{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "DatafactoryName": {
            "type": "string",
            "metadata": "Nom de fabrique de données",
            "defaultValue": "JiraCloudDataFact"
        },
        "Jira_Token": {
            "type": "secureString",
            "metadata": "Chaîne sécurisée pour « password » de « JiraAPI »"
        },
        "DataBase_password": {
            "type": "secureString",
            "metadata": "Chaîne sécurisée pour « password » de « JiraDB »"
        },
        "Jira_BaseUrl": {
            "type": "string",
            "defaultValue": "https://spectrumgroupe-team-dlggvk9h.atlassian.net/"
        },
        "Jira_Username": {
            "type": "string",
            "defaultValue": "myriam.benazzoun@spectrumgroupe.fr"
        },
        "server_name": {
            "type": "string",
            "defaultValue": "jiracloudsqlserver.database.windows.net"
        },
        "database_name": {
            "type": "string",
            "defaultValue": "JiraCloudDB"
        },
        "database_username": {
            "type": "string",
            "defaultValue": "JiraCloudServer"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('DatafactoryName'))]"
    },
    "resources": [
       {
    "type": "Microsoft.DataFactory/factories",
    "apiVersion": "2018-06-01",
    "name": "[parameters('DatafactoryName')]",
    "location": "[resourceGroup().location]",
    "identity": {
      "type": "SystemAssigned"
    },
    "properties": {}
  }, 
        {
            "name": "[concat(parameters('DatafactoryName'), '/DWH')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Board_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Board_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "extractBoardData": {},
                                    "source1": {},
                                    "loadData": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "select board ids",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Board_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select boardId from board_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "BoardFinal",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "foreach boardId",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "select board ids",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('select board ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "IssueOnlyIds_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "IssueOnlyIds_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": 5
                                            },
                                            "datasetParameters": {
                                                "extractIssueData": {
                                                    "boardId": {
                                                        "value": "@item().boardId",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source1": {},
                                                "sink1": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Project_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "IssueOnlyIds_DF",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Project_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": 5
                                            },
                                            "datasetParameters": {
                                                "ExtractProjectFromAPI": {
                                                    "boardId": "@item().boardId"
                                                },
                                                "source1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Sprint_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Project_DF",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Sprint_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": 5
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "boardId": "5"
                                                },
                                                "source2": {},
                                                "SprintFinal": {},
                                                "sink1": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get All Status",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "foreach boardId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "$['name']"
                                        },
                                        "sink": {
                                            "name": "status_name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "$['id']"
                                        },
                                        "sink": {
                                            "name": "status_id",
                                            "type": "Int32"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "$['statusCategory']['name']"
                                        },
                                        "sink": {
                                            "name": "statusCategory",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "mapComplexValuesToString": false
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "StatusAPI",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "StatusFinal",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "Type_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "get All Status",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "IssueType_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetPriority",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Type_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "$['name']"
                                        },
                                        "sink": {
                                            "name": "priority_name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "$['id']"
                                        },
                                        "sink": {
                                            "name": "priority_id",
                                            "type": "Int32"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "PriorityAPI",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "PriorityFinal",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "getIssueIds",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "GetPriority",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select id from Issue_Dim where id in (\n10009,\n10452,\n10552,\n10752,\n10852,\n10952,\n11152,\n11252,\n11352,\n11452,\n11464,\n11514,\n11614,\n11664,\n11714)",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each issueId",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "getIssueIds",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getIssueIds').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Worklog_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Worklog_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "IssueDetails",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Worklog_DF",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Issue_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "User_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "IssueDetails",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "UserForIssues_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": 10009
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": "10009"
                                                },
                                                "source2": {},
                                                "sink1": {},
                                                "sink2": {},
                                                "sink3": {},
                                                "sink4": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "IssueFact",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "User_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "IssueFact_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "source3": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "getProjectId",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "for each issueId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select project_id as projectId from project_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ProjectFinal",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each projectId",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "getProjectId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getProjectId').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "projectDetail_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "ProjectDetail_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "project_id": {
                                                    "value": "@item().projectId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "project_id": {
                                                        "value": "@item().projectId",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink1": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Data flow1",
                                    "type": "ExecuteDataFlow",
                                    "state": "Inactive",
                                    "onInactiveMarkAs": "Succeeded",
                                    "dependsOn": [
                                        {
                                            "activity": "projectDetail_DF",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "UserForProjects_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "projectId": {
                                                    "value": "@item().projectId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "project_id": {
                                                        "value": "@item().projectId",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink2": {},
                                                "sink3": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "sprintFact",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Time_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "sprintFact_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "source3": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "WorklogFACT",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "sprintFact",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "WorklogFact_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "date": {},
                                    "time": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "date_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "for each projectId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Date_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "source3": {},
                                    "source4": {},
                                    "source5": {},
                                    "source6": {},
                                    "source7": {},
                                    "dateFinal": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Time_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "date_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Time_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "boardId": {
                        "type": "int",
                        "defaultValue": 5
                    },
                    "projectId": {
                        "type": "int",
                        "defaultValue": 10000
                    },
                    "id": {
                        "type": "int",
                        "defaultValue": 10009
                    },
                    "baseUrl": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "apiToken": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2025-05-13T09:08:51Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Board_DF')]",
                "[concat(variables('factoryId'), '/datasets/BoardFinal')]",
                "[concat(variables('factoryId'), '/datasets/StatusAPI')]",
                "[concat(variables('factoryId'), '/datasets/StatusFinal')]",
                "[concat(variables('factoryId'), '/dataflows/IssueType_DF')]",
                "[concat(variables('factoryId'), '/datasets/PriorityAPI')]",
                "[concat(variables('factoryId'), '/datasets/PriorityFinal')]",
                "[concat(variables('factoryId'), '/datasets/IssueFinal')]",
                "[concat(variables('factoryId'), '/datasets/ProjectFinal')]",
                "[concat(variables('factoryId'), '/dataflows/sprintFact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/WorklogFact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Date_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Time_DF')]",
                "[concat(variables('factoryId'), '/dataflows/IssueOnlyIds_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Project_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Sprint_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Worklog_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Issue_DF')]",
                "[concat(variables('factoryId'), '/dataflows/UserForIssues_DF')]",
                "[concat(variables('factoryId'), '/dataflows/IssueFact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/ProjectDetail_DF')]",
                "[concat(variables('factoryId'), '/dataflows/UserForProjects_DF')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Gap')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Gap_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "source3": {},
                                    "sink1": {},
                                    "sink2": {},
                                    "sink3": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "S": {
                        "type": "string",
                        "defaultValue": "A"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2025-05-13T09:10:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Gap_DF')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueTypeAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/issuetype"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/ProjectAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/project",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/PriorityAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/priority"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/SprintAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/sprint",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueDetailAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "id": {
                        "type": "string",
                        "defaultValue": "10000"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/issue/@{dataset().id}",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/ProjectDetailAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "project_id": {
                        "type": "string",
                        "defaultValue": "10000"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/project/@{dataset().project_id}",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/WorklogAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "id": {
                        "type": "string",
                        "defaultValue": "10000"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/issue/@{dataset().id}/worklog",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/issue",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/StatusAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/status"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/BoardAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraAPI",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/agile/1.0/board"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/BoardFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "boardId",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "name",
                        "type": "varchar"
                    },
                    {
                        "name": "projectId",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Board_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/ProjectFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "project_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "project_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "project_key",
                        "type": "nvarchar"
                    },
                    {
                        "name": "creator_id",
                        "type": "nvarchar"
                    },
                    {
                        "name": "typeKey",
                        "type": "varchar"
                    },
                    {
                        "name": "board_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "project_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/DateFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Date",
                        "type": "date"
                    },
                    {
                        "name": "Year",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Month",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Day",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "MonthName",
                        "type": "varchar"
                    },
                    {
                        "name": "Quarter",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Weekday",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "DimDate"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/UserFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "user_id",
                        "type": "nvarchar"
                    },
                    {
                        "name": "accountType",
                        "type": "nvarchar"
                    },
                    {
                        "name": "display_name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "user_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/WorklogFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "startDate",
                        "type": "date"
                    },
                    {
                        "name": "timeSpent",
                        "type": "varchar"
                    },
                    {
                        "name": "startTime",
                        "type": "varchar"
                    },
                    {
                        "name": "author_id",
                        "type": "nvarchar"
                    },
                    {
                        "name": "issue_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "worklog_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/SprintFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "sprint_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date",
                        "type": "date"
                    },
                    {
                        "name": "end_date",
                        "type": "date"
                    },
                    {
                        "name": "state",
                        "type": "nvarchar"
                    },
                    {
                        "name": "sprint_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "completeDate",
                        "type": "date"
                    },
                    {
                        "name": "EnRetard",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "board_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "sprint_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/TimeDim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Time",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Hour",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Minute",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Second",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "DimTime"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/SprintFact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "sprint_fact_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "sprint_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "board_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "sprint_count",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "closed_sprints",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "retard_sprints",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "completeAtTime_sprints",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "duree_prevu_jours",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "duree_reelle_jours",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "end_date",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "complete_date",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "sprint_fact"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueFact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "sprint_fact_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "sprint_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "board_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "end_date",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "complete_date",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "sprint_fact"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueTypeFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "type_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "subTask",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "HierarchyLevel",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "type_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "project_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "IssueType_Dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "due_date",
                        "type": "date"
                    },
                    {
                        "name": "Agg_progressTotal",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_progressProgress",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_TimeEstimate",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Agg_timeSpent",
                        "type": "nvarchar"
                    },
                    {
                        "name": "resolution_date",
                        "type": "date"
                    },
                    {
                        "name": "creation_date",
                        "type": "date"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Issue_Dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/PriorityFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "priority_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "priority_name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "priority_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/StatusFinal')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "status_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "status_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "statusCategory",
                        "type": "nvarchar"
                    },
                    {
                        "name": "projectId",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Status_dim"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/worklog_fact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "worklog_fact_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "author_id",
                        "type": "nvarchar"
                    },
                    {
                        "name": "issue_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "time_spent",
                        "type": "nvarchar"
                    },
                    {
                        "name": "worklog_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_time",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "worklog_fact"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Gap')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "NbrWorklogs",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "NbrSprints",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "NbrIssues",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "ImportDate",
                        "type": "date"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "gap"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraDB')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/JiraAPI')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('Jira_BaseUrl')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('Jira_Username')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('Jira_Token')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/JiraDB')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "server": "[parameters('server_name')]",
                    "database": "[parameters('database_name')]",
                    "encrypt": "mandatory",
                    "trustServerCertificate": false,
                    "authenticationType": "SQL",
                    "userName": "[parameters('database_username')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('DataBase_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Board_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "BoardAPI",
                                "type": "DatasetReference"
                            },
                            "name": "extractBoardData"
                        },
                        {
                            "dataset": {
                                "referenceName": "BoardFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "BoardFinal",
                                "type": "DatasetReference"
                            },
                            "name": "loadData"
                        },
                        {
                            "dataset": {
                                "referenceName": "BoardFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectionnerLesColonnes"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as short, values as (id as short, isPrivate as boolean, location as (avatarURI as string, displayName as string, name as string, projectId as short, projectKey as string, projectName as string, projectTypeKey as string), name as string, self as string, type as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> extractBoardData",
                        "source(output(",
                        "          boardId as integer,",
                        "          name as string,",
                        "          projectId as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "extractBoardData foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          Boardid = body.values.id,",
                        "          name = body.values.name,",
                        "          type = body.values.type",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> SelectionnerLesColonnes",
                        "SelectionnerLesColonnes, source1 exists(SelectionnerLesColonnes@Boardid == source1@boardId,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source1 select(mapColumn(",
                        "          boardId",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "SelectionnerLesColonnes, select1 exists(SelectionnerLesColonnes@Boardid == select1@boardId,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(updateIf(Boardid>0)) ~> alterRow1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          boardId as integer,",
                        "          name as string,",
                        "          projectId as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          boardId = Boardid,",
                        "          name",
                        "     )) ~> loadData",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          boardId as integer,",
                        "          name as string,",
                        "          projectId as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['boardId'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          boardId = Boardid,",
                        "          name",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/BoardAPI')]",
                "[concat(variables('factoryId'), '/datasets/BoardFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/WorklogFact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "worklog_fact",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "DateFinal",
                                "type": "DatasetReference"
                            },
                            "name": "date"
                        },
                        {
                            "dataset": {
                                "referenceName": "TimeDim",
                                "type": "DatasetReference"
                            },
                            "name": "time"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "worklog_fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "worklog_fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "lookup4"
                        },
                        {
                            "name": "select8"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "source(output(",
                        "          worklog_fact_id as integer,",
                        "          author_id as string,",
                        "          issue_id as integer,",
                        "          time_spent as string,",
                        "          worklog_id as integer,",
                        "          start_date as integer,",
                        "          start_time as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source(output(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> date",
                        "source(output(",
                        "          id as integer,",
                        "          Time as string,",
                        "          Hour as integer,",
                        "          Minute as integer,",
                        "          Second as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> time",
                        "source1 select(mapColumn(",
                        "          id,",
                        "          startDate,",
                        "          timeSpent,",
                        "          startTime,",
                        "          author_id,",
                        "          issue_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "exists1 derive(worklogId = id,",
                        "          start_time = concat(toString(startDate), ' ', startTime)) ~> derivedColumn1",
                        "source2 select(mapColumn(",
                        "          worklog_fact_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select1, select2 exists(id == worklog_fact_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, select2 exists(id == worklog_fact_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "select7 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(worklogId = id,",
                        "          start_time = concat(toString(startDate), ' ', startTime)) ~> derivedColumn2",
                        "date select(mapColumn(",
                        "          id,",
                        "          Date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "derivedColumn2, select3 lookup(startDate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup1",
                        "lookup1 select(mapColumn(",
                        "          id = select1@id,",
                        "          timeSpent,",
                        "          startTime,",
                        "          author_id,",
                        "          issue_id,",
                        "          worklogId,",
                        "          start_time,",
                        "          startDate_id = select3@id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "derivedColumn1, select3 lookup(startDate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup2",
                        "lookup2 select(mapColumn(",
                        "          id = select1@id,",
                        "          timeSpent,",
                        "          startTime,",
                        "          author_id,",
                        "          issue_id,",
                        "          worklogId,",
                        "          id_date = select3@id,",
                        "          start_time",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "time select(mapColumn(",
                        "          id,",
                        "          Time,",
                        "          Hour,",
                        "          Minute,",
                        "          Second",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "select4, time lookup(startTime == Time,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup3",
                        "lookup3 select(mapColumn(",
                        "          id = select4@id,",
                        "          timeSpent,",
                        "          startTime,",
                        "          author_id,",
                        "          issue_id,",
                        "          worklogId,",
                        "          start_time = time@id,",
                        "          startDate_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "select5, time lookup(startTime == Time,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup4",
                        "lookup4 select(mapColumn(",
                        "          id = select5@id,",
                        "          timeSpent,",
                        "          startTime,",
                        "          author_id,",
                        "          issue_id,",
                        "          worklogId,",
                        "          id_date,",
                        "          start_time = time@id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select8",
                        "select8 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          worklog_fact_id as integer,",
                        "          author_id as string,",
                        "          issue_id as integer,",
                        "          time_spent as string,",
                        "          worklog_id as integer,",
                        "          start_date as integer,",
                        "          start_time as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          worklog_fact_id = id,",
                        "          author_id,",
                        "          issue_id,",
                        "          time_spent = timeSpent,",
                        "          worklog_id = worklogId,",
                        "          start_date = id_date,",
                        "          start_time",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          worklog_fact_id as integer,",
                        "          author_id as string,",
                        "          issue_id as integer,",
                        "          time_spent as string,",
                        "          worklog_id as integer,",
                        "          start_date as integer,",
                        "          start_time as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['worklog_fact_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          worklog_fact_id = id,",
                        "          author_id,",
                        "          issue_id,",
                        "          time_spent = timeSpent,",
                        "          worklog_id = worklogId,",
                        "          start_date = startDate_id,",
                        "          start_time",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/WorklogFinal')]",
                "[concat(variables('factoryId'), '/datasets/worklog_fact')]",
                "[concat(variables('factoryId'), '/datasets/DateFinal')]",
                "[concat(variables('factoryId'), '/datasets/TimeDim')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/ProjectDetail_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ProjectDetailAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "ProjectFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ProjectFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     project_id as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (assigneeType as string, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), components as string[], description as string, entityId as string, expand as string, id as short, isPrivate as boolean, issueTypes as (avatarId as short, description as string, hierarchyLevel as short, iconUrl as string, id as short, name as string, self as string, subtask as boolean)[], key as string, lead as (accountId as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, self as string), name as string, projectTypeKey as string, roles as (Administrator as string, Member as string, Viewer as string, {atlassian-addons-project-access} as string), self as string, simplified as boolean, style as string, uuid as string, versions as (archived as boolean, id as short, name as string, projectId as short, released as boolean, self as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          project_id as integer,",
                        "          project_name as string,",
                        "          project_key as string,",
                        "          creator_id as string,",
                        "          typeKey as string,",
                        "          board_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          id = body.id,",
                        "          key = body.key,",
                        "          name = body.name,",
                        "          accountId = body.lead.accountId,",
                        "          projectTypeKey = body.projectTypeKey",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "exists1 alterRow(upsertIf(id===$project_id)) ~> alterRow1",
                        "source2 select(mapColumn(",
                        "          project_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select1, select2 exists(id == project_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          project_id as integer,",
                        "          project_name as string,",
                        "          project_key as string,",
                        "          creator_id as string,",
                        "          typeKey as string,",
                        "          board_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:true,",
                        "     keys:['project_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          project_id = id,",
                        "          project_name = name,",
                        "          project_key = key,",
                        "          creator_id = accountId,",
                        "          typeKey = projectTypeKey",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ProjectDetailAPI')]",
                "[concat(variables('factoryId'), '/datasets/ProjectFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Sprint_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "SprintAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "SprintFinal"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as short, values as (completeDate as string, createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          sprint_id as integer,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          state as string,",
                        "          sprint_name as string,",
                        "          completeDate as date,",
                        "          EnRetard as integer,",
                        "          board_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          id = body.values.id,",
                        "          name = body.values.name,",
                        "          startDate = body.values.startDate,",
                        "          endDate = body.values.endDate,",
                        "          state = body.values.state,",
                        "          completeDate = body.values.completeDate,",
                        "          originBoardId = body.values.originBoardId",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10)),",
                        "          EnRetard = iif(\r",
                        "    toDate(endDate) < toDate(completeDate)\r",
                        "    || (isNull(completeDate) && toDate(endDate) < currentDate()), \r",
                        "    1, \r",
                        "    0\r",
                        ")) ~> derivedColumn1",
                        "source2 select(mapColumn(",
                        "          sprint_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "flatten1, select1 exists(id == sprint_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, select1 exists(id == sprint_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "alterRow1 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10)),",
                        "          EnRetard = iif(    toDate(endDate) < toDate(completeDate)    || (isNull(completeDate) && toDate(endDate) < currentDate()),     1,     0)) ~> derivedColumn2",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id as integer,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          state as string,",
                        "          sprint_name as string,",
                        "          completeDate as date,",
                        "          EnRetard as integer,",
                        "          board_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          sprint_id = id,",
                        "          start_date = startDateFinal,",
                        "          end_date = endDateFinal,",
                        "          state,",
                        "          board_id = originBoardId,",
                        "          sprint_name = name,",
                        "          completeDate = completeDateFinal,",
                        "          EnRetard",
                        "     )) ~> SprintFinal",
                        "derivedColumn2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id as integer,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          state as string,",
                        "          sprint_name as string,",
                        "          completeDate as date,",
                        "          EnRetard as integer,",
                        "          board_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['sprint_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          sprint_id = id,",
                        "          start_date = startDateFinal,",
                        "          end_date = endDateFinal,",
                        "          state,",
                        "          board_id = originBoardId,",
                        "          sprint_name = name,",
                        "          completeDate = completeDateFinal,",
                        "          EnRetard",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SprintAPI')]",
                "[concat(variables('factoryId'), '/datasets/SprintFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueOnlyIds_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueAPI",
                                "type": "DatasetReference"
                            },
                            "name": "extractIssueData"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "select2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, issues as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), attachment as string[], closedSprints as (completeDate as string, createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string)[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10016 as string, customfield_10017 as string, customfield_10019 as string, customfield_10020 as (boardId as short, completeDate as string, endDate as string, goal as string, id as short, name as string, startDate as string, state as string)[], customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, epic as string, fixVersions as (archived as boolean, description as string, id as short, name as string, releaseDate as date, released as boolean, self as string)[], flagged as boolean, issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, parent as (fields as (issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), priority as (iconUrl as string, id as short, name as string, self as string), status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), summary as string), id as short, key as string, self as string), priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as (description as string, id as short, name as string, self as string), resolutiondate as string, security as string, sprint as (createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string), status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as string, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as short, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), comment as string, created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string)[], maxResults as short, startAt as boolean, total as short),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> extractIssueData",
                        "source(output(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "extractIssueData foldDown(unrollMultiple(body.issues,body.issues.fields.worklog.worklogs),",
                        "     mapColumn(",
                        "          id = body.issues.id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> flatten1",
                        "source1 select(mapColumn(",
                        "          id_Verif = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select2, select1 exists(id == id_Verif,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1 select(mapColumn(",
                        "          id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueAPI')]",
                "[concat(variables('factoryId'), '/datasets/IssueFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/sprintFact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFact",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "DateFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "SprintFact",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "lookup4"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "lookup5"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "lookup6"
                        },
                        {
                            "name": "select8"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          sprint_id as integer,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          state as string,",
                        "          sprint_name as string,",
                        "          completeDate as date,",
                        "          EnRetard as integer,",
                        "          board_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "source(output(",
                        "          sprint_fact_id as integer,",
                        "          sprint_id as integer,",
                        "          board_id as integer,",
                        "          sprint_count as integer,",
                        "          closed_sprints as integer,",
                        "          retard_sprints as integer,",
                        "          completeAtTime_sprints as integer,",
                        "          duree_prevu_jours as integer,",
                        "          duree_reelle_jours as integer,",
                        "          start_date as integer,",
                        "          end_date as integer,",
                        "          complete_date as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source(output(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source3",
                        "source1 select(mapColumn(",
                        "          sprint_id,",
                        "          start_date,",
                        "          end_date,",
                        "          state,",
                        "          sprint_name,",
                        "          completeDate,",
                        "          EnRetard,",
                        "          board_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select8 derive(sprintFactId = sprint_id) ~> derivedColumn1",
                        "source2 select(mapColumn(",
                        "          sprint_fact_id,",
                        "          sprint_id,",
                        "          board_id,",
                        "          sprint_count,",
                        "          closed_sprints,",
                        "          retard_sprints,",
                        "          completeAtTime_sprints,",
                        "          duree_prevu_jours,",
                        "          duree_reelle_jours",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select1, select2 exists(select1@sprint_id == select2@sprint_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, select2 exists(select1@sprint_id == select2@sprint_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "select5 derive(sprintFactId = sprint_id) ~> derivedColumn2",
                        "exists2, source3 lookup(start_date == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup1",
                        "lookup1 select(mapColumn(",
                        "          sprint_id,",
                        "          end_date,",
                        "          state,",
                        "          sprint_name,",
                        "          completeDate,",
                        "          EnRetard,",
                        "          board_id,",
                        "          startdate_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "select3, source3 lookup(end_date == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup2",
                        "lookup2 select(mapColumn(",
                        "          sprint_id,",
                        "          state,",
                        "          sprint_name,",
                        "          completeDate,",
                        "          EnRetard,",
                        "          board_id,",
                        "          startdate_id,",
                        "          enddate_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "select4, source3 lookup(completeDate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup3",
                        "lookup3 select(mapColumn(",
                        "          sprint_id,",
                        "          state,",
                        "          sprint_name,",
                        "          EnRetard,",
                        "          board_id,",
                        "          startdate_id,",
                        "          enddate_id,",
                        "          completeDate_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "exists1, source3 lookup(start_date == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup4",
                        "lookup4 select(mapColumn(",
                        "          sprint_id,",
                        "          end_date,",
                        "          state,",
                        "          sprint_name,",
                        "          completeDate,",
                        "          board_id,",
                        "          startDate_Id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "select6, source3 lookup(end_date == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup5",
                        "lookup5 select(mapColumn(",
                        "          sprint_id,",
                        "          state,",
                        "          sprint_name,",
                        "          completeDate,",
                        "          board_id,",
                        "          startDate_Id,",
                        "          end_date_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "select7, source3 lookup(completeDate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup6",
                        "lookup6 select(mapColumn(",
                        "          sprint_id,",
                        "          state,",
                        "          sprint_name,",
                        "          board_id,",
                        "          startDate_Id,",
                        "          end_date_id,",
                        "          complete_date_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select8",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_fact_id as integer,",
                        "          sprint_id as integer,",
                        "          board_id as integer,",
                        "          sprint_count as integer,",
                        "          closed_sprints as integer,",
                        "          retard_sprints as integer,",
                        "          completeAtTime_sprints as integer,",
                        "          duree_prevu_jours as integer,",
                        "          duree_reelle_jours as integer,",
                        "          start_date as integer,",
                        "          end_date as integer,",
                        "          complete_date as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          sprint_fact_id = sprintFactId,",
                        "          sprint_id,",
                        "          board_id,",
                        "          start_date = startDate_Id,",
                        "          end_date = end_date_id,",
                        "          complete_date = complete_date_id",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_fact_id as integer,",
                        "          sprint_id as integer,",
                        "          board_id as integer,",
                        "          sprint_count as integer,",
                        "          closed_sprints as integer,",
                        "          retard_sprints as integer,",
                        "          completeAtTime_sprints as integer,",
                        "          duree_prevu_jours as integer,",
                        "          duree_reelle_jours as integer,",
                        "          start_date as integer,",
                        "          end_date as integer,",
                        "          complete_date as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:true,",
                        "     keys:['sprint_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          sprint_fact_id = sprintFactId,",
                        "          sprint_id,",
                        "          board_id,",
                        "          start_date = startdate_id,",
                        "          end_date = enddate_id,",
                        "          complete_date = completeDate_id",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SprintFinal')]",
                "[concat(variables('factoryId'), '/datasets/SprintFact')]",
                "[concat(variables('factoryId'), '/datasets/DateFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/UserForIssues_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetailAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink4"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "exists3"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "exists4"
                        },
                        {
                            "name": "alterRow2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10009)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (progress as boolean, total as boolean), aggregatetimeestimate as string, aggregatetimeoriginalestimate as string, aggregatetimespent as string, assignee as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, self as string, timeZone as string), attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as (id as short, name as string, self as string)[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10002 as string[], customfield_10003 as string, customfield_10004 as string, customfield_10005 as string, customfield_10006 as string, customfield_10007 as string, customfield_10008 as string, customfield_10009 as string, customfield_10010 as string, customfield_10011 as string, customfield_10012 as (id as short, self as string, value as string), customfield_10013 as string, customfield_10014 as string, customfield_10015 as string, customfield_10016 as string, customfield_10017 as string, customfield_10018 as (hasEpicLinkFieldDependency as boolean, nonEditableReason as (message as string, reason as string), showField as boolean), customfield_10019 as string, customfield_10020 as string, customfield_10021 as string, customfield_10022 as string, customfield_10023 as string, customfield_10024 as string, customfield_10025 as string, customfield_10026 as string, customfield_10027 as string, customfield_10028 as string, customfield_10029 as string, customfield_10030 as string, customfield_10031 as string, customfield_10032 as string, customfield_10034 as string, customfield_10035 as string, customfield_10036 as string, customfield_10037 as string, customfield_10038 as string[], customfield_10039 as string, customfield_10040 as string, customfield_10041 as string, customfield_10042 as string, customfield_10043 as string, customfield_10044 as string, customfield_10045 as string, customfield_10046 as string, customfield_10047 as string[], customfield_10048 as string, customfield_10049 as string, customfield_10050 as string, customfield_10051 as string, customfield_10052 as string, customfield_10053 as string, customfield_10056 as string, description as string, duedate as string, environment as string, fixVersions as (archived as boolean, id as short, name as string, released as boolean, self as string)[], issuelinks as string[], issuetype as (description as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (progress as boolean, total as boolean), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as string, timeoriginalestimate as string, timespent as string, updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as string[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          creatorId = body.fields.assignee.accountId,",
                        "          accountType = body.fields.assignee.accountType,",
                        "          displayName = body.fields.assignee.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source1 select(mapColumn(",
                        "          creatorId = body.fields.creator.accountId,",
                        "          accountType = body.fields.creator.accountType,",
                        "          displayName = body.fields.creator.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select2, select3 exists(creatorId == user_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, select3 exists(creatorId == user_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists2",
                        "source2 select(mapColumn(",
                        "          user_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "select2, select3 exists(creatorId == user_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists3",
                        "exists3 alterRow(updateIf(0===0)) ~> alterRow1",
                        "select1, select3 exists(creatorId == user_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists4",
                        "exists4 alterRow(updateIf(0===0)) ~> alterRow2",
                        "exists2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink2",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['user_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink3",
                        "alterRow2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink4"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetailAPI')]",
                "[concat(variables('factoryId'), '/datasets/UserFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Time_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "TimeDim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "TimeDim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select startTime from worklog_dim',",
                        "     format: 'query') ~> source1",
                        "source(output(",
                        "          id as integer,",
                        "          Time as string,",
                        "          Hour as integer,",
                        "          Minute as integer,",
                        "          Second as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "aggregate1 derive(hour = substring(startTime, 0, 2),",
                        "          minute = substring(startTime,4, 2),",
                        "          second = substring(startTime, 6, 2)) ~> derivedColumn1",
                        "exists1 aggregate(groupBy(startTime),",
                        "     countWorklog = count(startTime)) ~> aggregate1",
                        "source1, source2 exists(startTime == Time,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          Time as string,",
                        "          Hour as integer,",
                        "          Minute as integer,",
                        "          Second as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          Time = startTime,",
                        "          Hour = hour,",
                        "          Minute = minute,",
                        "          Second = second",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/WorklogFinal')]",
                "[concat(variables('factoryId'), '/datasets/TimeDim')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Date_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source4"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source5"
                        },
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source6"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source7"
                        },
                        {
                            "dataset": {
                                "referenceName": "DateFinal",
                                "type": "DatasetReference"
                            },
                            "name": "dateFinal"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "DateFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "union1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "split1"
                        },
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          resolution_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select resolution_date  from issue_dim',",
                        "     format: 'query') ~> source1",
                        "source(output(",
                        "          creation_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     batchSize: 0,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select creation_date from issue_dim',",
                        "     format: 'query') ~> source2",
                        "source(output(",
                        "          start_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select start_date from sprint_dim',",
                        "     format: 'query') ~> source3",
                        "source(output(",
                        "          end_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select end_date from sprint_dim',",
                        "     format: 'query') ~> source4",
                        "source(output(",
                        "          completeDate as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select completeDate from sprint_dim',",
                        "     format: 'query') ~> source5",
                        "source(output(",
                        "          startDate as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select startDate from worklog_dim',",
                        "     format: 'query') ~> source6",
                        "source(output(",
                        "          due_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select due_date from issue_dim',",
                        "     format: 'query') ~> source7",
                        "source(output(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> dateFinal",
                        "select1, select2, select3, select4, select5, select6, select7 union(byName: true)~> union1",
                        "source1 select(mapColumn(",
                        "          date = resolution_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source2 select(mapColumn(",
                        "          date = creation_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "source3 select(mapColumn(",
                        "          date = start_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "source4 select(mapColumn(",
                        "          date = end_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "source5 select(mapColumn(",
                        "          date = completeDate",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "source6 select(mapColumn(",
                        "          date = startDate",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "source7 select(mapColumn(",
                        "          date = due_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "aggregate1 derive(year = year(date),",
                        "          month = month(date),",
                        "          dayMonth = dayOfMonth(date),",
                        "          weekday = dayOfWeek(date),",
                        "          quarter = iif(month(date) <= 3, 1, iif(month(date) <= 6, 2, iif(month(date) <= 9, 3, 4)))) ~> derivedColumn1",
                        "split1@selectNotNullOnly aggregate(groupBy(date),",
                        "     count = count(date)) ~> aggregate1",
                        "exists1 split(!isNull(date),",
                        "     disjoint: false) ~> split1@(selectNotNullOnly)",
                        "union1, dateFinal exists(union1@date == dateFinal@Date,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          Date = date,",
                        "          Year = year,",
                        "          Month = month,",
                        "          Day = dayMonth,",
                        "          Quarter = quarter,",
                        "          Weekday = weekday",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueFinal')]",
                "[concat(variables('factoryId'), '/datasets/SprintFinal')]",
                "[concat(variables('factoryId'), '/datasets/WorklogFinal')]",
                "[concat(variables('factoryId'), '/datasets/DateFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/UserForProjects_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ProjectDetailAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "UserFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     projectId as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (assigneeType as string, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), components as string[], description as string, entityId as string, expand as string, id as short, isPrivate as boolean, issueTypes as (avatarId as short, description as string, hierarchyLevel as short, iconUrl as string, id as short, name as string, self as string, subtask as boolean)[], key as string, lead as (accountId as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, self as string), name as string, projectTypeKey as string, roles as (Administrator as string, Member as string, Viewer as string, {atlassian-addons-project-access} as string), self as string, simplified as boolean, style as string, uuid as string, versions as (archived as boolean, id as short, name as string, projectId as short, released as boolean, self as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          leadId = body.lead.accountId,",
                        "          displayName = body.lead.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "source2 select(mapColumn(",
                        "          user_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "select2, select3 exists(leadId == user_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select2, select3 exists(leadId == user_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = leadId,",
                        "          display_name = displayName",
                        "     )) ~> sink2",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id as string,",
                        "          accountType as string,",
                        "          display_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['user_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id = leadId,",
                        "          display_name = displayName",
                        "     )) ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ProjectDetailAPI')]",
                "[concat(variables('factoryId'), '/datasets/UserFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueFact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetailAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFact",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "DateFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueFact",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "lookup4"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "lookup5"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "lookup6"
                        },
                        {
                            "name": "select8"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as string, attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10017 as string, customfield_10019 as string, customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, fixVersions as string[], issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as double, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          issuefact_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select issuefact_id from IssueTrack_Fact',",
                        "     format: 'query') ~> source2",
                        "source(output(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source3",
                        "source1 select(mapColumn(",
                        "          issue_id = body.id,",
                        "          project_id = body.fields.project.id,",
                        "          type_id = body.fields.issuetype.id,",
                        "          priority_id = body.fields.priority.id,",
                        "          status_id = body.fields.status.id,",
                        "          account_id = body.fields.creator.accountId,",
                        "          duedate = body.fields.duedate,",
                        "          total = body.fields.progress.total,",
                        "          progress = body.fields.progress.progress,",
                        "          percent = body.fields.progress.percent,",
                        "          progress = body.fields.aggregateprogress.progress,",
                        "          progress = body.fields.aggregateprogress.total,",
                        "          percent = body.fields.aggregateprogress.percent,",
                        "          aggregatetimeestimate = body.fields.aggregatetimeestimate,",
                        "          aggregatetimespent = body.fields.aggregatetimespent,",
                        "          resolution = body.fields.resolution,",
                        "          resolutiondate = body.fields.resolutiondate,",
                        "          created = body.fields.created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1, source2 exists(issue_id == issuefact_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, source2 exists(issuefact_id===issue_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "select5 alterRow(updateIf(0===0)) ~> alterRow1",
                        "lookup1 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          duedate_id = id,",
                        "          created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "lookup2 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          duedate_id,",
                        "          resolutiondate_id = id,",
                        "          created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "lookup3 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          duedate_id,",
                        "          resolutiondate_id,",
                        "          created_date_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "exists2, source3 lookup(duedate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup1",
                        "select3, source3 lookup(toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd') == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup2",
                        "select4, source3 lookup(toDate(substring(created, 0, 10), 'yyyy-MM-dd') == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup3",
                        "exists1, source3 lookup(duedate == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup4",
                        "lookup4 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "select6, source3 lookup(toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd') == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup5",
                        "lookup5 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id,",
                        "          resolutiondate_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "select7, source3 lookup(toDate(substring(created, 0, 10), 'yyyy-MM-dd') == Date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup6",
                        "lookup6 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id,",
                        "          resolutiondate_id,",
                        "          created_date_id = id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select8",
                        "select8 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_fact_id as integer,",
                        "          sprint_id as integer,",
                        "          board_id as integer,",
                        "          start_date as integer,",
                        "          end_date as integer,",
                        "          complete_date as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issuefact_id = issue_id,",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          creator_id = account_id,",
                        "          creation_date = created_date_id,",
                        "          resolution_date = resolutiondate_id,",
                        "          due_date = due_date_id",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_fact_id as integer,",
                        "          sprint_id as integer,",
                        "          board_id as integer,",
                        "          start_date as integer,",
                        "          end_date as integer,",
                        "          complete_date as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['issuefact_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issuefact_id = issue_id,",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          creator_id = account_id,",
                        "          creation_date = created_date_id,",
                        "          resolution_date = resolutiondate_id,",
                        "          due_date = duedate_id",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetailAPI')]",
                "[concat(variables('factoryId'), '/datasets/IssueFact')]",
                "[concat(variables('factoryId'), '/datasets/DateFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Issue_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetailAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow2"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10009)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as string, attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10017 as string, customfield_10019 as string, customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, fixVersions as string[], issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as double, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          Agg_progress = body.fields.aggregateprogress.progress,",
                        "          Agg_percent = body.fields.aggregateprogress.percent,",
                        "          Agg_total = body.fields.aggregateprogress.total,",
                        "          aggregatetimeestimate = body.fields.aggregatetimeestimate,",
                        "          aggregatetimeoriginalestimate = body.fields.aggregatetimeoriginalestimate,",
                        "          aggregatetimespent = body.fields.aggregatetimespent,",
                        "          accountId = body.fields.creator.accountId,",
                        "          summary = body.fields.description,",
                        "          duedate = body.fields.duedate,",
                        "          projectId = body.fields.project.id,",
                        "          TypeId = body.fields.issuetype.id,",
                        "          priorityId = body.fields.priority.id,",
                        "          statusId = body.fields.status.id,",
                        "          resolutiondate = body.fields.resolutiondate,",
                        "          id = body.id,",
                        "          progprogress = body.fields.progress.progress,",
                        "          percent = body.fields.progress.percent,",
                        "          progtotal = body.fields.progress.total,",
                        "          accountType = body.fields.creator.accountType,",
                        "          displayName = body.fields.creator.displayName,",
                        "          created = body.fields.created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "derivedColumn1 alterRow(upsertIf(id===$id)) ~> alterRow1",
                        "exists1 derive(createdDateFinal = toDate(substring(created, 0, 10), 'yyyy-MM-dd'),",
                        "          resolutionDateFinal = toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd')) ~> derivedColumn1",
                        "select1, select2 exists(select1@id == select2@id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source2 select(mapColumn(",
                        "          id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select1, select2 exists(select1@id == select2@id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn2 alterRow(updateIf(0===0)) ~> alterRow2",
                        "exists2 derive(createdDateFinal = toDate(substring(created, 0, 10), 'yyyy-MM-dd'),",
                        "          resolutionDateFinal = toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd')) ~> derivedColumn2",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id,",
                        "          due_date = duedate,",
                        "          Agg_progressTotal = Agg_total,",
                        "          Agg_progressProgress = Agg_progress,",
                        "          Agg_TimeEstimate = aggregatetimeestimate,",
                        "          Agg_timeSpent = aggregatetimespent,",
                        "          resolution_date = resolutionDateFinal,",
                        "          creation_date = createdDateFinal",
                        "     )) ~> sink1",
                        "alterRow2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id,",
                        "          due_date = duedate,",
                        "          Agg_progressTotal = Agg_total,",
                        "          Agg_progressProgress = Agg_progress,",
                        "          Agg_TimeEstimate = aggregatetimeestimate,",
                        "          Agg_timeSpent = aggregatetimespent,",
                        "          resolution_date = resolutionDateFinal,",
                        "          creation_date = createdDateFinal",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetailAPI')]",
                "[concat(variables('factoryId'), '/datasets/IssueFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/IssueType_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueTypeAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueTypeFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueTypeFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueTypeFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "derivedColumn3"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (avatarId as short, description as string, hierarchyLevel as short, iconUrl as string, id as short, name as string, scope as (project as (id as short), type as string), self as string, subtask as boolean, untranslatedName as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          type_id as integer,",
                        "          subTask as integer,",
                        "          HierarchyLevel as integer,",
                        "          type_name as string,",
                        "          project_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "exists1 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn1",
                        "source2 select(mapColumn(",
                        "          type_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source1, select1 exists(body.id == type_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source1, source2 exists(body.id == type_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn3 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn2",
                        "derivedColumn2 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn3",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          type_id as integer,",
                        "          subTask as integer,",
                        "          HierarchyLevel as integer,",
                        "          type_name as string,",
                        "          project_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          type_id = body.id,",
                        "          subTask = subtaskFinal,",
                        "          HierarchyLevel = body.hierarchyLevel,",
                        "          type_name = body.name,",
                        "          project_id = body.scope.project.id",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          type_id as integer,",
                        "          subTask as integer,",
                        "          HierarchyLevel as integer,",
                        "          type_name as string,",
                        "          project_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['type_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          type_id = body.id,",
                        "          subTask = subtaskFinal,",
                        "          HierarchyLevel = body.hierarchyLevel,",
                        "          type_name = body.name,",
                        "          project_id = body.scope.project.id",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueTypeAPI')]",
                "[concat(variables('factoryId'), '/datasets/IssueTypeFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Project_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ProjectAPI",
                                "type": "DatasetReference"
                            },
                            "name": "ExtractProjectFromAPI"
                        },
                        {
                            "dataset": {
                                "referenceName": "ProjectFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ProjectFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as boolean, values as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> ExtractProjectFromAPI",
                        "source(output(",
                        "          project_id as integer,",
                        "          project_name as string,",
                        "          project_key as string,",
                        "          creator_id as string,",
                        "          typeKey as string,",
                        "          board_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "ExtractProjectFromAPI foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          id = body.values.id,",
                        "          key = body.values.key,",
                        "          name = body.values.name,",
                        "          projectTypeKey = body.values.projectTypeKey",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "flatten1 derive(boardId = $boardId) ~> derivedColumn1",
                        "derivedColumn1, source1 exists(id == project_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(upsertIf(isInteger(toString($boardId)))) ~> alterRow1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          project_id as integer,",
                        "          project_name as string,",
                        "          project_key as string,",
                        "          creator_id as string,",
                        "          typeKey as string,",
                        "          board_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['project_id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          project_id = id,",
                        "          project_name = name,",
                        "          project_key = key,",
                        "          typeKey = projectTypeKey,",
                        "          board_id = boardId",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ProjectAPI')]",
                "[concat(variables('factoryId'), '/datasets/ProjectFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Worklog_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "WorklogAPI",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "WorklogFinal",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 foldDown(unroll(body.worklogs, body.worklogs),",
                        "     mapColumn(",
                        "          authorId = body.worklogs.author.accountId,",
                        "          worklogId = body.worklogs.id,",
                        "          issueId = body.worklogs.issueId,",
                        "          started = body.worklogs.started,",
                        "          timeSpent = body.worklogs.timeSpent",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn1",
                        "source2 select(mapColumn(",
                        "          id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "flatten1, select1 exists(worklogId == id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, select1 exists(worklogId == id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn2",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id = worklogId,",
                        "          author_id = authorId,",
                        "          issue_id = issueId,",
                        "          timeSpent,",
                        "          startTime,",
                        "          startDate",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id = worklogId,",
                        "          author_id = authorId,",
                        "          issue_id = issueId,",
                        "          timeSpent,",
                        "          startTime,",
                        "          startDate",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/WorklogAPI')]",
                "[concat(variables('factoryId'), '/datasets/WorklogFinal')]"
            ]
        },
        {
            "name": "[concat(parameters('DatafactoryName'), '/Gap_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "worklog_fact",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "SprintFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueFinal",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Gap",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Gap",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "Gap",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate2"
                        },
                        {
                            "name": "aggregate3"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          worklog_fact_id as integer,",
                        "          author_id as string,",
                        "          issue_id as integer,",
                        "          time_spent as string,",
                        "          worklog_id as integer,",
                        "          start_date as integer,",
                        "          start_time as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "source(output(",
                        "          sprint_id as integer,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          state as string,",
                        "          sprint_name as string,",
                        "          completeDate as date,",
                        "          EnRetard as integer,",
                        "          board_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source(output(",
                        "          id as integer,",
                        "          due_date as date,",
                        "          Agg_progressTotal as integer,",
                        "          Agg_progressProgress as integer,",
                        "          Agg_TimeEstimate as string,",
                        "          Agg_timeSpent as string,",
                        "          resolution_date as date,",
                        "          creation_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source3",
                        "source1 aggregate(NbrWorklogs = count(worklog_fact_id)) ~> aggregate1",
                        "aggregate1 derive(Date = currentUTC()) ~> derivedColumn1",
                        "source2 aggregate(nbrSprints = count(sprint_id)) ~> aggregate2",
                        "source3 aggregate(nbrIssues = count(id)) ~> aggregate3",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          NbrWorklogs as integer,",
                        "          NbrSprints as integer,",
                        "          NbrIssues as integer,",
                        "          ImportDate as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          Date",
                        "     )) ~> sink1",
                        "aggregate2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          NbrWorklogs as integer,",
                        "          NbrSprints as integer,",
                        "          NbrIssues as integer,",
                        "          ImportDate as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          NbrSprints = nbrSprints",
                        "     )) ~> sink2",
                        "aggregate3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as integer,",
                        "          NbrWorklogs as integer,",
                        "          NbrSprints as integer,",
                        "          NbrIssues as integer,",
                        "          ImportDate as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError') ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/worklog_fact')]",
                "[concat(variables('factoryId'), '/datasets/SprintFinal')]",
                "[concat(variables('factoryId'), '/datasets/IssueFinal')]",
                "[concat(variables('factoryId'), '/datasets/Gap')]"
            ]
        }
    ]
}
